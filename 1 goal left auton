
   
// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                    
// FrontLeft            motor         17              
// FrontRight           motor         6               
// RearLeft             motor         14              
// RearRight            motor         11              
// RightLift            motor         9               
// LeftLift             motor         20              
// pick                 motor         4               
// gflipper             motor         1               
// Inertial12           inertial      8               
// EncoderAB            encoder       A, B            
// EncoderCD            encoder       C, D            
// EncoderGH            encoder       E, F            
// Vision18             vision        18              
// Controller2          controller                    
// BumperH              bumper        H               
// ---- END VEXCODE CONFIGURED DEVICES ----
#include <ctime>
#include "vex.h"
#include <iostream>
using namespace vex;

vex::competition Competition; 

 
// define your global instances of motors and other devices here
/*---------------------------------------------------------------------------*/
/* Pre-Autonomous Functions */
/* */
/* You may want to perform some actions before the competition starts. */
/* D
\\ motor RearLeft 12.56, 16, 16, distanceUnits::in );o them in the following function. You must return from this function */
/* or the autonomous and usercontrol tasks will not be started. This */
/* function is only called once after the V5 has been powered on and */
/* not every time that the robot is disabled. */
/*---------------------------------------------------------------------------*/
void pre_auton(void) {
// Initializing Robot Configuration. DO NOT REMOVE!
vexcodeInit();
// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}

void spin1() {
 pick.setVelocity(100, percent);

 pick.spinFor(forward, 50, degrees, true);

 pick.stop();
 
}

void spin6() {
 pick.setVelocity(100, percent);

 pick.spinFor(reverse, 300, degrees, true);

 pick.stop();
 
}

void spin7() {
 pick.setVelocity(100, percent);

 pick.spinFor(forward, 50, degrees, true);

 pick.stop();
 
}

void spin2() {
 gflipper.setVelocity(100, percent);

 gflipper.spinFor(reverse, 1000, degrees, true); 

 gflipper.stop();
 
}

void spin3() {
 gflipper.setVelocity(100, percent);

 gflipper.spinFor(forward, 600, degrees, true);

 gflipper.stop();
 
}


void spin4() {
 LeftLift.setVelocity(100, percent);
 RightLift.setVelocity(100, percent);

 RightLift.spinFor(reverse, 450, degrees, false);
 LeftLift.spinFor(forward, 450, degrees, true);

 LeftLift.stop();
 RightLift.stop();
 
}

void drivefwd(){
  FrontLeft.setVelocity(80, percent);
  FrontRight.setVelocity(80, percent);
  RearLeft.setVelocity(80, percent);
  RearRight.setVelocity(80, percent);

 FrontLeft.spinFor(forward, 1300, degrees, false);
 RearLeft.spinFor(forward, 1300, degrees, false);
 RearRight.spinFor(reverse, 1300, degrees, false);
 FrontRight.spinFor(reverse, 1300, degrees, true);  

 FrontLeft.stop();
  FrontRight.stop();
  RearLeft.stop();
  RearRight.stop();
  FrontLeft.setStopping(brake); 
  FrontRight.setStopping(brake); 
  RearLeft.setStopping(brake); 
  RearRight.setStopping(brake); 
}

void drivefwd1(){
  FrontLeft.setVelocity(80, percent);
  FrontRight.setVelocity(80, percent);
  RearLeft.setVelocity(80, percent);
  RearRight.setVelocity(80, percent);

 FrontLeft.spinFor(forward, 800, degrees, false);
 RearLeft.spinFor(forward, 800, degrees, false);
 RearRight.spinFor(reverse, 800, degrees, false);
 FrontRight.spinFor(reverse, 800, degrees, true);  

 FrontLeft.stop();
  FrontRight.stop();
  RearLeft.stop();
  RearRight.stop();
  FrontLeft.setStopping(brake); 
  FrontRight.setStopping(brake); 
  RearLeft.setStopping(brake); 
  RearRight.setStopping(brake); 
}

void Backward(){
  FrontLeft.setVelocity(80, percent);
  FrontRight.setVelocity(80, percent);
  RearLeft.setVelocity(80, percent);
  RearRight.setVelocity(80, percent);
  pick.setVelocity(80, percent);

pick.spin(forward);

 FrontLeft.spinFor(reverse, 900, degrees, false);
 RearLeft.spinFor(reverse, 900, degrees, false);
 RearRight.spinFor(forward, 900, degrees, false);
 FrontRight.spinFor(forward, 900, degrees, true);  

 FrontLeft.stop();
  FrontRight.stop();
  RearLeft.stop();
  RearRight.stop();
  pick.stop();
  FrontLeft.setStopping(brake); 
  FrontRight.setStopping(brake); 
  RearLeft.setStopping(brake); 
  RearRight.setStopping(brake); 
}

void Backward1(){
  FrontLeft.setVelocity(80, percent);
  FrontRight.setVelocity(80, percent);
  RearLeft.setVelocity(80, percent);
  RearRight.setVelocity(80, percent);
  pick.setVelocity(80, percent);

pick.spin(forward);

 FrontLeft.spinFor(reverse, 1500, degrees, false);
 RearLeft.spinFor(reverse, 1500, degrees, false);
 RearRight.spinFor(forward, 1500, degrees, false);
 FrontRight.spinFor(forward, 1500, degrees, true);  

 FrontLeft.stop();
  FrontRight.stop();
  RearLeft.stop();
  RearRight.stop();
  pick.stop();
  FrontLeft.setStopping(brake); 
  FrontRight.setStopping(brake); 
  RearLeft.setStopping(brake); 
  RearRight.setStopping(brake); 
}

void Backward2(){
  FrontLeft.setVelocity(80, percent);
  FrontRight.setVelocity(80, percent);
  RearLeft.setVelocity(80, percent);
  RearRight.setVelocity(80, percent);
  pick.setVelocity(80, percent);

 FrontLeft.spinFor(reverse, 500, degrees, false);
 RearLeft.spinFor(reverse, 500, degrees, false);
 RearRight.spinFor(forward, 500, degrees, false);
 FrontRight.spinFor(forward, 500, degrees, true);  

 FrontLeft.stop();
  FrontRight.stop();
  RearLeft.stop();
  RearRight.stop();
  FrontLeft.setStopping(brake); 
  FrontRight.setStopping(brake); 
  RearLeft.setStopping(brake); 
  RearRight.setStopping(brake); 
}

void TurnLeftOneSide(int goalAngle){
 bool flag = false;
Inertial12.setHeading(0, degrees);

 FrontRight.setVelocity(70, percent);
 RearRight.setVelocity(70, percent); 
 FrontLeft.setVelocity(70, percent);
 RearLeft.setVelocity(70, percent);

 FrontRight.spin(reverse);
 RearRight.spin(reverse);
 FrontLeft.spin(reverse);
 RearLeft.spin(reverse);

 while(flag == false){
 int currAngle = Inertial12.heading();

 if(currAngle < goalAngle + 2 
 && currAngle > goalAngle - 2){
 flag = true;
 }
 wait(0.001, seconds); 
 }

 FrontRight.stop();
 RearRight.stop();
 FrontLeft.stop();
 RearLeft.stop();
 FrontLeft.setStopping(brake); 
 FrontRight.setStopping(brake); 
 RearLeft.setStopping(brake); 
 RearRight.setStopping(brake); 
}

void Intakerollers(){
 pick.setVelocity(40, percent);
 gflipper.setVelocity(100, percent);
 LeftLift.setVelocity(100, percent);
 RightLift.setVelocity(100, percent);
 LeftLift.spinFor(forward, 360, degrees, false);
 RightLift.spinFor(reverse, 360, degrees, false);
 pick.spinFor(forward, 2000, degrees, false);
 gflipper.spinFor(forward, 2500, degrees, true);

 pick.stop();
 gflipper.stop();
 LeftLift.stop();
 RightLift.stop();
}

void TurnRightSide(int goalAngle){
 bool flag = false;

Inertial12.setHeading(0, degrees);

 FrontRight.setVelocity(80, percent);
 RearRight.setVelocity(80, percent);
 FrontLeft.setVelocity(80, percent);
 RearLeft.setVelocity(80, percent);

 FrontRight.spin(forward);
 RearRight.spin(forward);
 FrontLeft.spin(forward);
 RearLeft.spin(forward);

 while(flag == false){
 int currAngle = Inertial12.heading();

 if(currAngle < goalAngle + 2 
 && currAngle > goalAngle - 2){
 flag = true;
 }
 wait(0.001, seconds); 
 }

 FrontRight.stop();
 RearRight.stop();
 FrontLeft.stop();
 RearLeft.stop();
 FrontLeft.setStopping(brake); 
 FrontRight.setStopping(brake); 
 RearLeft.setStopping(brake); 
 RearRight.setStopping(brake); 
}
/*---------------------------------------------------------------------------*/
/* */
/* User Control Task */
/* */
/* This task is used to control your robot during the user control phase of */
/* a VEX Competition. */
/* */
/* You must modify the code to add your own robot specific commands here. */
/*---------------------------------------------------------------------------*/

void drive(){
 
while(true){ // infinite loop

Brain.Screen.clearLine();
        Vision18.takeSnapshot(Vision18__SIG_RED);

        if (Vision18.takeSnapshot(Vision18__SIG_RED)) {
          Brain.Screen.print("Blue detected");
        }

        Brain.Screen.print(EncoderCD.position(degrees));

        if (Controller2.ButtonX.pressing()){
            gflipper.setVelocity(60, percent);

          gflipper.spinFor(forward, 405, degrees, true);

          FrontLeft.stop();
          FrontRight.stop();
         RearRight.stop();
          RearLeft.stop();

          gflipper.stop();

          }

          FrontLeft.spin(vex::directionType::rev, (-Controller1.Axis1.value() - Controller1.Axis3.value()), vex::voltageUnits::volt);
          FrontRight.spin(vex::directionType::rev, (-Controller1.Axis1.value() + Controller1.Axis3.value()), vex::voltageUnits::volt);
          RearLeft.spin(vex::directionType::rev, (-Controller1.Axis1.value() - Controller1.Axis3.value()), vex::voltageUnits::volt);
          RearRight.spin(vex::directionType::rev, (-Controller1.Axis1.value() + Controller1.Axis3.value()), vex::voltageUnits::volt);
        
          LeftLift.spin(vex::directionType::fwd, Controller2.ButtonL1.pressing()*12.0 -Controller2.ButtonL2.pressing()*12.0, vex::voltageUnits::volt); //Sets the left motor power to R2
          RightLift.spin(vex::directionType::rev, Controller1.ButtonL2.pressing()*12.0 -Controller1.ButtonR1.pressing()*12.0, vex::voltageUnits::volt); //Sets the right motor power to R2
          pick.spin(vex::directionType::fwd, Controller1.ButtonR2.pressing()*12.0 - Controller1.ButtonL1.pressing()*12.0, vex::voltageUnits::volt); //Sets the right motor power to L2
          gflipper.spin(vex::directionType::fwd, Controller2.ButtonR1.pressing()*12.0 - Controller2.ButtonR2.pressing()*12.0, vex::voltageUnits::volt); //Sets the right motor power to L2

        wait(1, msec);
    }
}

//
// Main will set up the competition functions and callbacks.
//

void autonomous(){
 drivefwd();
 spin1();
 Backward();
 }

int main() {
 Inertial12.calibrate();
 wait(2, seconds);
Competition.autonomous(autonomous);
Competition.drivercontrol(drive);


//Set up callbacks for autonomous and driver control periods.

 
// Run the pre-autonomous function.


//Set up callbacks for autonomous and driver control periods.
 
// Run the pre-autonomous function.
//
// Prevent main from exiting with an infinite loop.
 FrontLeft.stop();
 RearLeft.stop();
 FrontRight.stop();
 RearRight.stop();
 LeftLift.stop();
 RightLift.stop();
 pick.stop();
 gflipper.stop();
 
 return 0;
 // Set up callbacks for autonomous and driver control periods.
}
